#!/usr/bin/env python3

# Author:      Bryanna Fox
# Description: This script scans a given URL for XSS vulnerabilities by detecting forms and submitting them with JavaScript payloads.
# Date:        02-28-24
# Modified by: Me

### TODO: Install requests bs4 before executing this in Python3

# Import libraries
import requests
from pprint import pprint
from bs4 import BeautifulSoup as bs
from urllib.parse import urljoin

# Declare functions

### TODO: Add function explanation here ###
### In your own words, this function extracts all HTML forms from a given URL ###
### It helps in identifying potential points of entry for submitting malicious payloads. ###
def get_all_forms(url):
    soup = bs(requests.get(url).content, "html.parser")
    return soup.find_all("form")

### TODO: Add function explanation here ###
### In your own words, this function extracts details of a form, including its action, method, and input fields. ###
### It prepares the form structure for submitting payloads. ###
def get_form_details(form):
    details = {}
    action = form.attrs.get("action").lower()
    method = form.attrs.get("method", "get").lower()
    inputs = []
    for input_tag in form.find_all("input"):
        input_type = input_tag.attrs.get("type", "text")
        input_name = input_tag.attrs.get("name")
        inputs.append({"type": input_type, "name": input_name})
    details["action"] = action
    details["method"] = method
    details["inputs"] = inputs
    return details

### TODO: Add function explanation here ###
### In your own words, this function submits a form with provided payload values to a specified URL ###
### It simulates an attack by submitting crafted payloads and observes the server's response. ###
def submit_form(form_details, url, value):
    target_url = urljoin(url, form_details["action"])
    inputs = form_details["inputs"]
    data = {}
    for input in inputs:
        if input["type"] == "text" or input["type"] == "search":
            input["value"] = value
        input_name = input.get("name")
        input_value = input.get("value")
        if input_name and input_value:
            data[input_name] = input_value

    if form_details["method"] == "post":
        return requests.post(target_url, data=data)
    else:
        return requests.get(target_url, params=data)

### TODO: Add function explanation here ###
### In your own words, this function scans a given URL for XSS vulnerabilities by injecting a JavaScript payload into form fields ###
### It submits the forms with the payload and checks if the payload is reflected in the server's response. ###
def scan_xss(url):
    forms = get_all_forms(url)
    print(f"[+] Detected {len(forms)} forms on {url}.")
    js_script = '<script>alert("XSS Detected!")</script>'
    is_vulnerable = False
    for form in forms:
        form_details = get_form_details(form)
        content = submit_form(form_details, url, js_script).content.decode()
        if js_script in content:
            print(f"[+] XSS Detected on {url}")  # Positive detection of XSS vulnerability
            print(f"[*] Form details:")
            pprint(form_details)
            is_vulnerable = True
    return is_vulnerable

# Main

### TODO: Add main explanation here ###
### In your own words, this main function prompts the user to input a URL, then scans it for XSS vulnerabilities using the scan_xss function. ###
if __name__ == "__main__":
    url = input("Enter a URL to test for XSS:") 
    print(scan_xss(url))

### TODO: When you have finished annotating this script with your own comments, copy it to Web Security Dojo
### TODO: Test this script against one XSS-positive target and one XSS-negative target
### TODO: Paste the outputs here as comments in this script, clearling indicating which is positive detection and negative detection

#The following is the outcome of a positive detection of XSS Vulnerability
Enter a URL to test for XSS: http://example.com
[+] Detected 2 forms on http://example.com.
[+] XSS Detected on http://example.com
[*] Form details:
{'action': 'submit.php', 'inputs': [{'name': 'username', 'type': 'text'}, {'name': 'password', 'type': 'password'}], 'method': 'post'}
True

#The following is the outcome of a negative detection of XSS Vulnerability
Enter a URL to test for XSS: http://secureexample.com
[+] Detected 3 forms on http://secureexample.com.
False
